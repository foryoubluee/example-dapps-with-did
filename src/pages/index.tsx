import useLoading from "@/hooks/useLoading";
import Head from "next/head";
import { useEffect, useState } from "react";
import upbondServices from "@/libs/upbondEmbed";
import { ToastContainer, toast } from "react-toastify";
import { useRouter } from "next/router";
import { ethers } from "ethers";

export default function Home() {
  const upbond = upbondServices.upbond;
  const { LoaderDisplay } = useLoading();
  const { push: navigate } = useRouter();

  const [isLoading, setLoading] = useState(false);
  const [jwtDid, setJwtDid] = useState<any>(null);
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);
  const [isInitialized, setIsInitialized] = useState<boolean>(false);
  const [userDidData, setUserDidData] = useState<string | undefined>();
  const [ethersWeb3Provider, setEthersWeb3Provider] =
    useState<ethers.providers.Web3Provider | null>(null);

  const getJwtDid = async () => {
    console.log("torus url", upbond.torusUrl);
    console.log(`init? ${isInitialized}`);

    try {
      console.log(`@ start get jwt did from ${upbond.torusUrl}/`);
      setLoading(true);
      const did = await upbond.consent?.getDid();

      if (did === undefined) {
        toast(
          <DidErrorToast
            msg={`You don't have did, please create on`}
            href={`${upbond.torusUrl}/`}
          />,
          { autoClose: false }
        );
      } else if (did !== undefined) {
        setJwtDid(did);
      }

      if (did ?? jwtDid) {
        setLoading(true);
        await getUserDidData(did ?? jwtDid);
      } else {
        navigate("/login");
      }

      console.log("@ complete get jwt did");
    } catch (error: any) {
      toast(<DidErrorToast msg={error.message} />, {
        autoClose: false,
      });

      setIsLoggedIn(false);

      if (error.message === "User not loggedin") {
        setIsLoggedIn(false);
        localStorage.removeItem("isLoggedIn");
      }
    }
  };

  const getUserDidData = async (didJwt: any) => {
    try {
      setLoading(true);
      console.log("@ start getUserDid");
      const data = await upbond.consent?.requestUserData(didJwt);
      console.log(data, "@user did data");
    } catch (error) {
      setIsLoggedIn(false);
      localStorage.removeItem("isLoggedIn");
      setLoading(false);
    }
    setLoading(false);
  };

  useEffect(() => {
    const initUpbond = async () => {
      try {
        setLoading(true);
        await upbondServices.init();
        setIsInitialized(true);
      } catch (error) {
        console.error(`Error initialization: `, error);
      }
    };
    if (upbondServices.initialized) {
      return;
    }
    initUpbond();
  }, []);

  useEffect(() => {
    if (isInitialized && !jwtDid) {
      (async () => await getJwtDid())();
    }
  }, [isInitialized, jwtDid]);

  useEffect(() => {
    if (
      upbondServices.isLoggedIn ||
      localStorage.getItem("isLoggedIn") === "true"
    ) {
      setIsLoggedIn(true);
    } else {
      setIsLoggedIn(false);
      setTimeout(() => navigate("/login"), 1000);
    }
  }, []);

  useEffect(() => {
    if (isLoggedIn && jwtDid && userDidData) {
      setLoading(false);
    } else {
      setLoading(true);
    }
  }, [isLoggedIn, jwtDid, userDidData]);

  return isLoggedIn && !isLoading ? (
    <>
      <Head>
        <title>Example DApps with DID</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-[rgb(16,24,39)] h-screen text-gray-300">
        <ToastContainer
          style={{ width: "100%", maxWidth: "500px" }}
          position="top-center"
          autoClose={5000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="dark"
        />
        <div className="mx-auto max-w-7xl py-24 px-4 sm:px-6 sm:py-32 lg:px-8">
          {!isLoading ? (
            <div className="relative overflow-hidden bg-gray-900 shadow-xl py-14 px-12 rounded-2xl">
              <h1 className="max-w-2xl text-2xl font-bold tracking-tight">
                Welcome to Example DID DApps
              </h1>
              <div className="w-full mt-6">
                <div className="w-full flex">
                  <div className="w-full max-w-sm p-3 shadow-sm bg-gray-800 rounded-xl">
                    <h1>Your Decentralized Identifiers</h1>
                    <ul className="text-gray-400 mt-2">
                      <li>email:</li>
                      <li>name:</li>
                      <li>birthday:</li>
                    </ul>
                  </div>
                </div>
                <button
                  onClick={async () => {
                    await upbondServices.logout();
                    localStorage.removeItem("isLoggedIn");
                    setIsLoggedIn(false);
                  }}
                  className="rounded-md mt-6 hover:bg-green-600 px-3.5 py-2.5 text-sm font-semibold text-gray-50 shadow-sm bg-green-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white"
                >
                  Logout
                </button>
              </div>
            </div>
          ) : (
            <div className="w-screen h-screen grid place-content-center">
              <LoaderDisplay size={70} color="#fff" />
            </div>
          )}
        </div>
        <div className="w-full flex justify-center">
          <img
            src={"https://i.ibb.co/JkkMJ1d/1574.png"}
            alt="upbondlogo"
            width={100}
            height={100}
          />
        </div>
      </main>
    </>
  ) : (
    <div className="w-screen h-screen grid place-content-center">
      <LoaderDisplay size={70} color="#fff" />
    </div>
  );
}

const DidErrorToast = ({ msg, href }: { msg: string; href?: string }) => {
  return (
    <div>
      {msg}{" "}
      <a href={href} target="_blank" className="underline">
        {href}
      </a>
    </div>
  );
};
